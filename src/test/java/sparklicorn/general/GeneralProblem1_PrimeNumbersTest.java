package sparklicorn.general;

import static org.junit.Assert.assertEquals;

import java.util.concurrent.ThreadLocalRandom;

import org.junit.Test;

public class GeneralProblem1_PrimeNumbersTest {

	@Test
	public void isPrime_whenInputIsNegative_returnsFalse() {
		assertEquals(false, GeneralProblem1_PrimeNumbers.isPrime(-1));
		assertEquals(false, GeneralProblem1_PrimeNumbers.isPrime(Integer.MIN_VALUE));

		ThreadLocalRandom rand = ThreadLocalRandom.current();
		for (int i = 0; i < 1000; i++) {
			assertEquals(false, GeneralProblem1_PrimeNumbers.isPrime(rand.nextInt(Integer.MIN_VALUE, 0)));
		}
	}

	@Test
	public void isPrime_whenInputIsZero_returnsFalse() {
		assertEquals(false, GeneralProblem1_PrimeNumbers.isPrime(0));
	}

	@Test
	public void isPrime_whenInputIsOne_returnsFalse() {
		assertEquals(false, GeneralProblem1_PrimeNumbers.isPrime(1));
	}

	@Test
	public void isPrime_whenInputIsPositiveComposite_returnsFalse() {
		int[] composites = new int[] { 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 51, 9583410, 41446944, 4760640, 4052048, 2772144, 12702396, 3818880, 9890100, 55328, 817152, 1867320, 553536, 1131928, 15911280, 357120, 7144200, 6990984, 226512, 26371800, 37092864, 134003520, 477709640, 193920444, 1843094880, 69124502, 440019755, 879443145, 47090984, 1382418600, 396514280, 395163092, 108458022, 343031114, 1732321801, 603640450, 42759921, 86360494, 1612790636, 155650458, 217090112, 2147395600, 2147117569 };

		for (int n : composites) {
			assertEquals(false, GeneralProblem1_PrimeNumbers.isPrime(n));
		}
	}

	@Test
	public void isPrime_whenInputIsPrime_returnsTrue() {
		int[] primes = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 1952569103, 144831217, 32229203, 1565691467, 1129122833, 1253231251, 1419400501, 1638235351, 1542128303, 1966406999, 1902540973, 870601343, 1323378503, 457264439, 897075181, 331966669, 1863260743, 73050121, 1910993863, 1316690923, 1513468657, 396006983, 1772451049, 910960711, 222599249, 103236131, 814998983, 406890163, 1657879747, 482280083, 350099531, 1550356177, 1559128231, 1837024289, 654438263, 277977299, 1055350187, 696686021, 1253763571, 1615240943, 664633219, 307126181, 792749609, 1622936999, 349985971, 295236737, 1924737499, 547561577, 1376436491, 1045417097, 950123267, 251392699, 1649047663, 20268163, 90162949, 686276303, 1091859851, 2098909889, 1986205513, 980064329, 1848721367, 150817859, 1899888233, 1890367951, 2087029969, 538998401, 1062312047, 1355528539, 1844306351, 248135807, 1430834591, 758623991, 397003471, 1151424727, 8550877, 429090913, 677343949, 97433801, 667543133, 1202123537, 1456871551, 638395711, 993214351, 842738593, 737590603, 72201299, 455533733, 1707095801, 1581167779, 356867369, 468573613, 560981683, 1529349043, 1675159169, 1213617299, 1794020551, 1188413731, 1425817331, 877687403, 1948862441 };

		for (int n : primes) {
			assertEquals("isPrime(" + n + "):", true, GeneralProblem1_PrimeNumbers.isPrime(n));
		}
	}
}
